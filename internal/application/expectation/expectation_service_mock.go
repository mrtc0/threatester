// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package expectation

import (
	"context"
	threatestergithubiov1alpha1 "github.com/mrtc0/threatester/api/v1alpha1"
	"sync"
)

// Ensure, that ExpectationServiceMock does implement ExpectationService.
// If this is not the case, regenerate this file with moq.
var _ ExpectationService = &ExpectationServiceMock{}

// ExpectationServiceMock is a mock implementation of ExpectationService.
//
//	func TestSomethingThatUsesExpectationService(t *testing.T) {
//
//		// make and configure a mocked ExpectationService
//		mockedExpectationService := &ExpectationServiceMock{
//			RunExpectationFunc: func(ctx context.Context) (bool, error) {
//				panic("mock out the RunExpectation method")
//			},
//			SetExpectationsFunc: func(expectations []threatestergithubiov1alpha1.Expectation)  {
//				panic("mock out the SetExpectations method")
//			},
//		}
//
//		// use mockedExpectationService in code that requires ExpectationService
//		// and then make assertions.
//
//	}
type ExpectationServiceMock struct {
	// RunExpectationFunc mocks the RunExpectation method.
	RunExpectationFunc func(ctx context.Context) (bool, error)

	// SetExpectationsFunc mocks the SetExpectations method.
	SetExpectationsFunc func(expectations []threatestergithubiov1alpha1.Expectation)

	// calls tracks calls to the methods.
	calls struct {
		// RunExpectation holds details about calls to the RunExpectation method.
		RunExpectation []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// SetExpectations holds details about calls to the SetExpectations method.
		SetExpectations []struct {
			// Expectations is the expectations argument value.
			Expectations []threatestergithubiov1alpha1.Expectation
		}
	}
	lockRunExpectation  sync.RWMutex
	lockSetExpectations sync.RWMutex
}

// RunExpectation calls RunExpectationFunc.
func (mock *ExpectationServiceMock) RunExpectation(ctx context.Context) (bool, error) {
	if mock.RunExpectationFunc == nil {
		panic("ExpectationServiceMock.RunExpectationFunc: method is nil but ExpectationService.RunExpectation was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockRunExpectation.Lock()
	mock.calls.RunExpectation = append(mock.calls.RunExpectation, callInfo)
	mock.lockRunExpectation.Unlock()
	return mock.RunExpectationFunc(ctx)
}

// RunExpectationCalls gets all the calls that were made to RunExpectation.
// Check the length with:
//
//	len(mockedExpectationService.RunExpectationCalls())
func (mock *ExpectationServiceMock) RunExpectationCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockRunExpectation.RLock()
	calls = mock.calls.RunExpectation
	mock.lockRunExpectation.RUnlock()
	return calls
}

// SetExpectations calls SetExpectationsFunc.
func (mock *ExpectationServiceMock) SetExpectations(expectations []threatestergithubiov1alpha1.Expectation) {
	if mock.SetExpectationsFunc == nil {
		panic("ExpectationServiceMock.SetExpectationsFunc: method is nil but ExpectationService.SetExpectations was just called")
	}
	callInfo := struct {
		Expectations []threatestergithubiov1alpha1.Expectation
	}{
		Expectations: expectations,
	}
	mock.lockSetExpectations.Lock()
	mock.calls.SetExpectations = append(mock.calls.SetExpectations, callInfo)
	mock.lockSetExpectations.Unlock()
	mock.SetExpectationsFunc(expectations)
}

// SetExpectationsCalls gets all the calls that were made to SetExpectations.
// Check the length with:
//
//	len(mockedExpectationService.SetExpectationsCalls())
func (mock *ExpectationServiceMock) SetExpectationsCalls() []struct {
	Expectations []threatestergithubiov1alpha1.Expectation
} {
	var calls []struct {
		Expectations []threatestergithubiov1alpha1.Expectation
	}
	mock.lockSetExpectations.RLock()
	calls = mock.calls.SetExpectations
	mock.lockSetExpectations.RUnlock()
	return calls
}
